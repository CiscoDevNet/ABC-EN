# DEV NOTE: This is an example of an unhandled assertion.  When this script
# is executed, the good assertion will never be tested because an EXCEPTION
# will be RAISED.
#
# An "Exception" is a program error that can be generated by Python tasks but
# is designed in a manner that can be handled - if desired.
#
# "Raised" means that code has been written in such a way that an error can
# create an Exception.  For example, a developer might write their code such
# that if some condition is not met, a Runtime Error can be raised using the
# Python statement "raise RuntimeError" with an optional message describing
# why the error was created.
#
# The good news is that exceptions can be handled gracefully so they do not
# cause the program to terminate, but instead perform some other action and
# permit the script to continue.  This is very useful in situations where a
# program is only designed to perform tests and not actually do any data
# processing.  For example, if you want to test that some configuration is
# present on a device but do not intend to actually configure the device,
# you may wish to use "assert" as a test and handle the exception, printing
# an error to let you know that some test failed while continuing other
# tests that may succeed.
#
# In this example, the first assert statement will generate an exception
# named "AssertionError" which is a built-in Python exception.  Observe the
# following:
#  - The arguments for the assert are NOT in parenthesis.  Unlike other
#    funcitons, Python will interpret parenthesis in an assertion as a
#    tuple and the test will not succeed.  This may not be true for more
#    recent versions of Python, but older versions may not handle
#    parenthesis correctly.
#
#  - There is a second parameter to the assertion, identified by a comma
#    and a string to output contained in quotes.  This is the "assertion
#    message" and is optional.  If provided, the assertion message should
#    provide a description of the test being performed.
#
# When an assertion message is provided, it will be printed along with the
# generation AssertionError exception.  Otherwise, the message is useful
# to explain what the purpose of the test is.
#
# The second assert statement, which will evaluate to be TRUE, will never
# be tested.  Try it using the command:
#
# python bad_assert.py

# This will result in a value of False, generate an AssertionError, and
# display the failed assertion message.
assert 2 == 1, "Test that 2 equals 1"

# This would result in a value of True but will never be tested.
assert 1 == 1, "Test that 1 equals 1"
